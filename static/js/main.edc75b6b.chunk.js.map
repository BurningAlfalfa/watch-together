{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["socketURL","window","location","hostname","console","log","socket","io","transports","App","useState","messages","setMessages","chatboxRef","React","useRef","url","setUrl","useEffect","onConnect","on","onChatMessage","message","m","concat","current","scrollTo","scrollHeight","handleCommand","off","setMessage","command","values","className","playing","controls","onEnded","emit","ref","map","Button","onClick","TextField","onKeyDown","event","key","timeStamp","Date","now","messageWithTime","Intl","DateTimeFormat","year","month","day","hour","minute","format","startsWith","type","value","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAQMA,EACyB,cAA7BC,OAAOC,SAASC,SACZ,sBACA,0CACKC,QAAQC,IAAI,gBAAiBL,GAExC,IAAMM,EAASC,IAAGP,EAAW,CAAEQ,WAAY,CAAC,eA6F7BC,MA3Ff,WAAgB,IAAD,EACmBC,mBAAmB,IADtC,mBACNC,EADM,KACIC,EADJ,KAEPC,EAAaC,IAAMC,OAAuB,MAFnC,EAGQL,qBAHR,mBAGNM,EAHM,KAGDC,EAHC,KAIbC,qBAAU,WAER,SAASC,IACPf,QAAQC,IAAI,uBAEdC,EAAOc,GAAG,UAAWD,GAEtB,IAAME,EAAgB,SAACC,GACpBV,GAAY,SAACW,GAAD,OAAOA,EAAEC,OAAOF,MAE1BT,EAAWY,SACZZ,EAAWY,QAAQC,SAAS,EAAEb,EAAWY,QAAQE,eAYpD,OAFArB,EAAOc,GAAG,eAAgBC,GAC1Bf,EAAOc,GAAG,UAAUQ,GACb,WACLtB,EAAOuB,IAAI,UAAUV,GACrBb,EAAOuB,IAAI,eAAeR,GAC1Bf,EAAOuB,IAAI,UAAWD,MAGvB,CAACf,IAjCS,MAqCkBC,IAAMJ,SAAS,IArCjC,mBAqCLY,EArCK,KAqCIQ,EArCJ,KAsCPF,EAAe,SAAC,GAAmD,IAAlDG,EAAiD,EAAjDA,QAAWC,EAAsC,2BACrD,SAAZD,GAEDd,EAAOe,EAAOhB,MA4BpB,OAzBAZ,QAAQC,IAAIiB,GA0BV,sBAAKW,UAAU,MAAf,UACA,cAAC,IAAD,CAAcA,UAAU,gBAAgBC,SAAO,EAACC,UAAQ,EAACnB,IAAKA,EAAMoB,QAAS,WACzE9B,EAAO+B,KAAK,cACZjC,QAAQC,IAAI,uBAEhB,qBAAMiC,IAAKzB,EAAYoB,UAAW,UAAlC,SACCtB,EAAS4B,KAAI,SAACjB,GAAD,OACV,8BAAMA,SAGJ,cAACkB,EAAA,EAAD,CAAQC,QAAS,WACjBnC,EAAO+B,KAAK,eAAef,IAD3B,kBAMJ,cAACoB,EAAA,EAAD,CAAWC,UAnCE,SAACC,GAEhB,GAAiB,UAAdA,EAAMC,IAAgB,CAEvB,IAAMC,EAAYC,KAAKC,MAErBC,EAAmB,IAAIC,KAAKC,eAAe,QAAS,CAACC,KAAM,UAAWC,MAAO,UAAUC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,YAAYC,OAAOX,GAAY,KAAMxB,EACpKA,EAAQoC,WAAW,KACpBpD,EAAO+B,KAAK,eAAgBf,GAG7BhB,EAAO+B,KAAK,eAAeY,GAG5BnB,EAAW,MAqBqB6B,KAAK,OAAOC,MAAOtC,EAASuC,SAzCtC,SAACjB,GAGxBd,EAAWc,EAAMkB,OAAOF,cClDdG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.edc75b6b.chunk.js","sourcesContent":["import \"./App.css\"\nimport ReactPlayer from 'react-player'\nimport React, { useEffect, useState } from \"react\";\nimport { Button, TextField } from '@material-ui/core';\nimport io from \"socket.io-client\";\n//import { timeStamp } from \"console\";\n\nconst isDebug = true;\nconst socketURL =\n  window.location.hostname === \"localhost\"\n    ? \"ws://localhost:8000\"\n    : \"wss://aleo-watch-together.herokuapp.com\";\nisDebug && console.log(\"socket url = \", socketURL);\n\nconst socket = io(socketURL, { transports: [\"websocket\"] });\n\nfunction App() {\n  const [messages, setMessages] = useState<string[]>([]);\n  const chatboxRef = React.useRef<HTMLDivElement>(null)\n  const [url, setUrl] =useState<string>(); \n  useEffect(() => {\n\n    function onConnect () {\n      console.log(\"connected to socket\");\n    }\n    socket.on(\"connect\", onConnect);\n   \n   const onChatMessage = (message: string) => {\n      setMessages((m) => m.concat(message));\n    \n    if (chatboxRef.current){\n       chatboxRef.current.scrollTo(0,chatboxRef.current.scrollHeight)\n    } \n\n    //Object.defineProperty(HTMLMediaElement.prototype, 'playing', {\n      //get: function(){\n        //  return !!(this.currentTime > 0 && !this.paused && !this.ended && this.readyState > 2);\n      //}\n  //})\n    }\n    //when we receive a message...\n    socket.on(\"chat-message\", onChatMessage);\n    socket.on(\"command\",handleCommand) \n    return ()=>{\n      socket.off(\"connect\",onConnect)\n      socket.off(\"chat-message\",onChatMessage)\n      socket.off(\"command\", handleCommand)\n    }\n\n  }, [chatboxRef]);\n  // useEffect(() =>{ //@ts-ignore\n  //   handleCommand({url:\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",command:\"play\"})\n  // },[])\n   const [message, setMessage] = React.useState(\"\");\n  const handleCommand =({command,...values}:{command:string,values:any})=>{\n      if(command === \"play\"){\n        //@ts-ignore\n        setUrl(values.url as string)\n      }\n  }\n  console.log(message);\n  const handleChangeInput = (event:React.ChangeEvent<HTMLInputElement>) => {\n    \n      \n     setMessage(event.target.value);\n  };\n  \n  const keyPress = (event: React.KeyboardEvent<HTMLInputElement>) =>{\n    \n    if(event.key === \"Enter\"){\n\n      const timeStamp = Date.now(); \n\n  const messageWithTime = (new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit'}).format(timeStamp))+\": \"+ message;\n      if(message.startsWith(\"!\")){\n        socket.emit(\"chat-message\", message)\n      }else{\n\n       socket.emit(\"chat-message\",messageWithTime);\n      }\n// check if video is donw ot go to next video in Que\n      setMessage(\"\");\n       // put the ddd here\n    }\n }\n  return (\n    <div className=\"App\"> \n    <ReactPlayer  className=\"youtubePlayer\" playing controls url={url}  onEnded={()=>{\n        socket.emit(\"videoEnded\")\n        console.log(\"its being called\");\n      }}/>\n    <div  ref={chatboxRef} className =\"chatbox\">\n    {messages.map((message) => (\n        <div>{message}</div>\n      ))}\n      </div>\n          <Button onClick={() => {\n          socket.emit(\"chat-message\",message );\n        }}\n          >\n        Send\n         </Button> \n      <TextField onKeyDown={keyPress} type=\"text\" value={message} onChange={handleChangeInput} ></TextField>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}